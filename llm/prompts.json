{
    "Scatter Plot": {
        "unlabeled": {
            "Data Extraction": "<input>: An SVG scatter plot with n points. The points are not labeled with their coordinates. The axes are labeled with their respective scales. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A comma-separated values (CSV) string with two columns: 'X' and 'Y'. Each row represents the coordinates of a data point. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the axes and their scales.\n2. For each data point in the scatter plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. To obtain the correct y-coordinates, you need to flip the extracted y-values vertically along a horizontal axis. This means subtracting each y-value from the maximum y-value of the plot.\n6. Extract the precise coordinates of each data point based on the computed values, taking into account the flipped y-coordinates.\n7. Format the extracted coordinates as a CSV string with two columns: 'X' and 'Y'.\n8. Each row in the CSV should represent the coordinates of a single data point.\n9. Do not include any other textual answer in your response besides the CSV string.\n\nPlease provide the CSV string with the coordinates of each data point in the specified format without any additional textual response.\n\n<input SVG scatterplot>:",
            "Filtering": "<input>: An SVG scatter plot with n points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the scatter plot with data points that meet the specified criteria colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the data points, with the same number of points as the provided SVG chart. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the axes and their scales.\n2. For each data point in the scatter plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Apply the specified filtering criteria: (Y > 0). This criteria is based on the labeled Y values, not the coordinates in the shape definitions of the SVG file.\n5. Reconstruct the SVG code of the scatter plot according to the filtering task:\n   - Color the data points that satisfy the criteria (Y > 0) with a different color.\n   - Keep the color of the data points that do not meet the criteria unchanged.\n6. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n7. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n8. Ensure that the reconstructed SVG code includes only the data points, with the same number of points as the provided SVG chart.\n9. Remember to add the necessary shape definitions for the data points in the reconstructed SVG code, if applicable.\n10. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the scatter plot with the data points filtered and colored according to the specified criteria, without any additional textual response.\n\n<input SVG scatterplot>:",
            "Clustering": "<input>: An SVG scatter plot with n points. The points are not labeled with their coordinates. The axes, background, title, legends, and other elements are removed for simplicity.\n\n<output>: SVG code only and no other textual response.\n\nInstructions:\n1. Cluster the points into distinct groups based on their proximity or similarity.\n2. Reconstruct the SVG scatter plot, coloring the points in different clusters with different colors.\n3. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n4. Ensure that the reconstructed SVG contains only the data points, with the same number of points as the input SVG.\n5. Include the necessary shape definitions in the reconstructed SVG code.\n\nPlease provide the complete SVG code for the clustered scatter plot without any additional textual response.\n <input SVG scatterplot>:\n",
            "Find Anomalies": "<input>: An SVG scatter plot with n points. The points are not labeled with their coordinates. The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: SVG code only and no other textual response\n\nInstructions:n1. Identify the two outliers in the scatter plot, defined as data points that significantly deviate from the clusters.\n2. Reconstruct the SVG scatter plot, coloring the outliers with a different color compared to the rest of the points.\n3. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n4. Ensure that the reconstructed SVG contains only the data points, with the same number of points as the input SVG.\n5. Include the necessary shape definitions in the reconstructed SVG code.\n\nPlease provide the complete SVG code for the scatter plot with the outliers colored differently, without any additional textual response.\n <input SVG scatterplot>:\n",
            "Find Extremum": "<input>: An SVG scatter plot with n points. The points are not labeled with their coordinates. The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: SVG code only and no other textual response.\n\nInstructions:\n1. Identify the extremum points in the scatter plot, defined as the data points with the highest and lowest Y values.\n2. Reconstruct the SVG scatter plot, coloring the extremum points with a different color compared to the rest of the points.\n3. Keep in mind that the origin is at the bottom left corner, X increases from left to right, and Y increases from bottom to top (reversed from the SVG definition).\n4. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n5. Ensure that the reconstructed SVG contains only the data points, with the same number of points as the input SVG.\n6. Include the necessary shape definitions in the reconstructed SVG code.\n7. Do not include any other textual answer in your response besides the reconstructed SVG code.\n\nPlease provide the complete SVG code for the scatter plot with the extremum points colored differently, without any additional textual response.\n <input SVG scatterplot>:\n",
            "Compute Value": "<input>: An SVG scatter plot with n points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A single numerical value representing the computed aggregate (mean of the Y values). Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the axes and their scales.\n2. For each data point in the scatter plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value of each data point based on the computed coordinates.\n6. Calculate the mean of all the extracted Y values.\n7. Provide only the computed mean value as the output, without any additional textual answer.\n\nPlease provide the computed mean of the Y values in the scatter plot, without any additional textual response.\n\n<input SVG scatterplot>:",
            "Correlate": "<input>: A scatter plot in its SVG format. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the scatter plot with a fitted line added using linear regression. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the data points and the fitted line, with the same number of points as the provided SVG chart. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the axes and their scales.\n2. For each data point in the scatter plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the X and Y values of each data point based on the computed coordinates.\n6. Perform linear regression on the extracted X and Y values to obtain the coefficients of the fitted line.\n7. Reconstruct the SVG code of the scatter plot, including the data points and the fitted line.\n8. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n9. Ensure that the reconstructed SVG code includes only the data points and the fitted line, with the same number of points as the provided SVG chart.\n10. Remember to add the necessary shape definitions for the data points and the fitted line in the reconstructed SVG code.\n11. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the scatter plot with the fitted line added, without any additional textual response.\n\n<input SVG scatterplot>:",
            "Determine Range": "<input>: A scatter plot in its SVG format. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The range of the Y values in the dataset, in the format of 'min, max'. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the axes and their scales.\n2. For each data point in the scatter plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value of each data point based on the computed coordinates.\n6. Determine the minimum and maximum values among the extracted Y values.\n7. Respond with the range of the Y values in the format of 'min, max'.\n8. Do not include any other textual answer in your response besides the determined range.\n\nPlease provide the range of the Y values in the scatter plot, in the format of 'min, max', without any additional textual response.\n\n<input SVG scatterplot>:"
        },
        "labeled": {
            "Data Extraction": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A comma-separated values (CSV) string with two columns: 'X' and 'Y'. Each row represents the coordinates of a data point. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the X and Y values of each data point from their respective labels.\n3. Format the extracted coordinates as a CSV string with two columns: 'X' and 'Y'.\n4. Each row in the CSV should represent the coordinates of a single data point.\n5. Do not include any other textual answer in your response besides the CSV string.\n\nPlease provide the CSV string with the coordinates of each data point in the specified format without any additional textual response.\n\n<input SVG scatterplot>:",
            "Filtering": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the scatter plot with data points that meet the specified criteria colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the data points, with the same number of points as the provided SVG chart. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the X and Y values of each data point from their respective labels.\n3. Apply the specified filtering criteria: (Y > 0). This criteria is based on the labeled Y values.\n4. Reconstruct the SVG code of the scatter plot according to the filtering task:\n   - Color the data points that satisfy the criteria (Y > 0) with a different color.\n   - Keep the color of the data points that do not meet the criteria unchanged.\n5. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n6. Ensure that the reconstructed SVG code includes only the data points, with the same number of points as the provided SVG chart.\n7. Remember to add the necessary shape definitions for the data points in the reconstructed SVG code, if applicable.\n8. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the scatter plot with the data points filtered and colored according to the specified criteria, without any additional textual response.\n\n<input SVG scatterplot>:",
            "Clustering": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The axes, background, title, legends, and other elements are removed for simplicity.\n\n<output>: SVG code only and no other textual response.\n\nInstructions:\n1. Cluster the points into distinct groups based on their proximity or similarity using their labeled coordinates.\n2. Reconstruct the SVG scatter plot, coloring the points in different clusters with different colors.\n3. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n4. Ensure that the reconstructed SVG contains only the data points, with the same number of points as the input SVG.\n5. Include the necessary shape definitions in the reconstructed SVG code.\n\nPlease provide the complete SVG code for the clustered scatter plot without any additional textual response.\n <input SVG scatterplot>:\n",
            "Find Anomalies": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: SVG code only and no other textual response\n\nInstructions:\n1. Identify the two outliers in the scatter plot, defined as data points that significantly deviate from the clusters based on their labeled coordinates.\n2. Reconstruct the SVG scatter plot, coloring the outlier with a different color compared to the rest of the points.\n3. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n4. Ensure that the reconstructed SVG contains only the data points, with the same number of points as the input SVG.\n5. Include the necessary shape definitions in the reconstructed SVG code.\n\nPlease provide the complete SVG code for the scatter plot with the outliers colored differently, without any additional textual response.\n <input SVG scatterplot>:\n",
            "Find Extremum": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: SVG code only and no other textual response.\n\nInstructions:\n1. Identify the extremum points in the scatter plot, defined as the data points with the highest and lowest Y values based on their labeled coordinates.\n2. Reconstruct the SVG scatter plot, coloring the extremum points with a different color compared to the rest of the points.\n3. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n4. Ensure that the reconstructed SVG contains only the data points, with the same number of points as the input SVG.\n5. Include the necessary shape definitions in the reconstructed SVG code.\n6. Do not include any other textual answer in your response besides the reconstructed SVG code.\n\nPlease provide the complete SVG code for the scatter plot with the extremum points colored differently, without any additional textual response.\n <input SVG scatterplot>:\n",
            "Compute Value": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A single numerical value representing the computed aggregate (mean of the Y values). Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the Y value of each data point from their respective labels.\n3. Calculate the mean of all the extracted Y values.\n4. Provide only the computed mean value as the output, without any additional textual answer.\n\nPlease provide the computed mean of the Y values in the scatter plot, without any additional textual response.\n\n<input SVG scatterplot>:",
            "Correlate": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the scatter plot with a fitted line added using linear regression. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the data points and the fitted line, with the same number of points as the provided SVG chart. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the X and Y values of each data point from their respective labels.\n3. Perform linear regression on the extracted X and Y values to obtain the coefficients of the fitted line.\n4. Reconstruct the SVG code of the scatter plot, including the data points and the fitted line.\n5. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n6. Ensure that the reconstructed SVG code includes only the data points and the fitted line, with the same number of points as the provided SVG chart.\n7. Remember to add the necessary shape definitions for the data points and the fitted line in the reconstructed SVG code.\n8. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the scatter plot with the fitted line added, without any additional textual response.\n\n<input SVG scatterplot>:",
            "Determine Range": "<input>: An SVG scatter plot with n points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The range of the Y values in the dataset, in the format of ‘min, max’. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG scatter plot and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the Y value of each data point from their respective labels.\n3. Determine the minimum and maximum values among the extracted Y values.\n4. Respond with the range of the Y values in the format of ‘min, max’.\n5. Do not include any other textual answer in your response besides the determined range.\n\nPlease provide the range of the Y values in the scatter plot, in the format of ‘min, max’, without any additional textual response.\n\n<input SVG scatterplot>:"
        }
        
    },
    "Line Plot": {
        "unlabeled": {
            "Data Extraction":"<input>: An SVG line chart with n data points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A comma-separated values (CSV) string with two columns: 'X' and 'Y'. Each row represents the coordinates of a data point. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the axes and their scales.\n2. For each data point in the line chart, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. To obtain the correct y-coordinates, you need to flip the extracted y-values vertically along a horizontal axis. This means subtracting each y-value from the maximum y-value of the plot.\n6. Extract the precise coordinates of each data point based on the computed values, taking into account the flipped y-coordinates.\n7. Format the extracted coordinates as a CSV string with two columns: 'X' and 'Y'.\n8. Each row in the CSV should represent the coordinates of a single data point.\n9. Do not include any other textual answer in your response besides the CSV string.\n\nPlease provide the CSV string with the coordinates of each data point in the specified format without any additional textual response.\n\n<input SVG line chart>:",
            "Filtering":"<input>: An SVG line chart with n data points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the line chart with the data points that meet the specified criteria (X >= 2 and X <= 6). Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the part of the line that meets the given criteria. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the axes and their scales.\n2. For each data point in the line chart, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Apply the specified filtering criteria: (X >= 2 and X <= 6). This criteria is based on the computed X values.\n5. Reconstruct the SVG code of the line chart, including only the part of the line that meets the given criteria.\n6. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n7. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n8. Remember to add the necessary shape definitions for the line in the reconstructed SVG code, if applicable.\n9. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the data points filtered according to the specified criteria, without any additional textual response.\n\n<input SVG line chart>:",
            "Find Anomalies":"<input>: An SVG line chart with n data points. The points are not labeled with their coordinates. The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: The complete SVG code of the line chart with the two outlier points (significant spikes or drops) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original line with the outlier points highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the axes and their scales.\n2. For each data point in the line chart, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the X and Y values of each data point based on the computed coordinates.\n6. Identify the outlier points in the line chart, defined as data points that represent significant spikes or drops based on their computed coordinates.\n7. Reconstruct the SVG code of the line chart, coloring the outlier points with a different color compared to the rest of the points.\n8. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n9. Ensure that the reconstructed SVG contains the original line with the outlier points highlighted.\n10. Include the necessary shape definitions in the reconstructed SVG code.\n11. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the outlier points colored differently, without any additional textual response.\n\n<input SVG line chart>:",
            "Find Extremum":"<input>: An SVG line chart with n data points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the line chart with the extremum points (highest and lowest Y values) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original line with the extremum points highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the axes and their scales.\n2. For each data point in the line chart, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value of each data point based on the computed coordinates.\n6. Identify the extremum points in the line chart, defined as the data points with the highest and lowest Y values based on their computed coordinates.\n7. Reconstruct the SVG code of the line chart, coloring the extremum points with a different color compared to the rest of the points.\n8. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n9. Ensure that the reconstructed SVG contains the original line with the extremum points highlighted.\n10. Include the necessary shape definitions in the reconstructed SVG code.\n11. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the extremum points colored differently, without any additional textual response.\n\n<input SVG line chart>:",
            "Compute Value":"<input>: An SVG line plot with n data points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A single numerical value representing the computed aggregate (mean of the Y values). Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG line plot and identify the axes and their scales.\n2. For each data point in the line plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value of each data point based on the computed coordinates.\n6. Calculate the mean of all the extracted Y values.\n7. Provide only the computed mean value as the output, without any additional textual answer.\n\nPlease provide the computed mean of the Y values in the line plot, without any additional textual response.\n\n<input SVG line plot>:",
            "Correlate":"<input>: An SVG line chart with n data points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the line chart with a fitted line added using linear regression. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original line and the fitted line. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the axes and their scales.\n2. For each data point in the line chart, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the X and Y values of each data point based on the computed coordinates.\n6. Perform linear regression on the extracted X and Y values to obtain the coefficients of the fitted line.\n7. Reconstruct the SVG code of the line chart, including the original line and the fitted line.\n8. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n9. Remember to add the necessary shape definitions for the lines in the reconstructed SVG code, if applicable.\n10. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the fitted line added, without any additional textual response.\n\n<input SVG line chart>:",
            "Determine Range":"<input>: An SVG line chart with n data points. The points are not labeled with their coordinates. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The range of the Y values in the dataset, in the format of 'min, max'. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the axes and their scales.\n2. For each data point in the line chart, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each data point.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value of each data point based on the computed coordinates.\n6. Determine the minimum and maximum values among the extracted Y values.\n7. Respond with the range of the Y values in the format of 'min, max'.\n8. Do not include any other textual answer in your response besides the determined range.\n\nPlease provide the range of the Y values in the line chart, in the format of 'min, max', without any additional textual response.\n\n<input SVG line chart>:"
        },
        "labeled": {
            "Data Extraction":"<input>: An SVG line chart with n data points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A comma-separated values (CSV) string with two columns: 'X' and 'Y'. Each row represents the coordinates of a data point. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the X and Y values of each data point from their respective labels.\n3. Format the extracted coordinates as a CSV string with two columns: 'X' and 'Y'.\n4. Each row in the CSV should represent the coordinates of a single data point.\n5. Do not include any other textual answer in your response besides the CSV string.\n\nPlease provide the CSV string with the coordinates of each data point in the specified format without any additional textual response.\n\n<input SVG line chart>:",
            "Filtering":"<input>: An SVG line chart with n data points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the line chart with the data points that meet the specified criteria (X >= 2 and X <= 6). Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the part of the line that meets the given criteria. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the X and Y values of each data point from their respective labels.\n3. Apply the specified filtering criteria: (X >= 2 and X <= 6). This criteria is based on the labeled X values.\n4. Reconstruct the SVG code of the line chart, including only the part of the line that meets the given criteria.\n5. Omit the axes, title, legends, labels, and other unnecessary elements in the reconstructed SVG code.\n6. Remember to add the necessary shape definitions for the line in the reconstructed SVG code, if applicable.\n7. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the data points filtered according to the specified criteria, without any additional textual response.\n\n<input SVG line chart>:",
            "Find Anomalies":"<input>: An SVG line chart with n data points. Each data point is labeled with its corresponding coordinates (X and Y values). The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: The complete SVG code of the line chart with the two outlier points (significant spikes or drops) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original line with the outlier points highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the X and Y values of each data point from their respective labels.\n3. Identify the outlier points in the line chart, defined as data points that represent significant spikes or drops based on their labeled coordinates.\n4. Reconstruct the SVG code of the line chart, coloring the outlier points with a different color compared to the rest of the points.\n5. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n6. Ensure that the reconstructed SVG contains the original line with the outlier points highlighted.\n7. Include the necessary shape definitions in the reconstructed SVG code.\n8. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the outlier points colored differently, without any additional textual response.\n\n<input SVG line chart>:",
            "Find Extremum":"<input>: An SVG line chart with n data points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the line chart with the extremum points (highest and lowest Y values) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original line with the extremum points highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the Y value of each data point from their respective labels.\n3. Identify the extremum points in the line chart, defined as the data points with the highest and lowest Y values based on their labeled coordinates.\n4. Reconstruct the SVG code of the line chart, coloring the extremum points with a different color compared to the rest of the points.\n5. Omit the axes, labels, title, legends, and any other unnecessary elements in the reconstructed SVG.\n6. Ensure that the reconstructed SVG contains the original line with the extremum points highlighted.\n7. Include the necessary shape definitions in the reconstructed SVG code.\n8. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the extremum points colored differently, without any additional textual response.\n\n<input SVG line chart>:",
            "Compute Value":"<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A single numerical value representing the computed aggregate (mean of the Y values). Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n3. Calculate the mean of all the extracted Y values.\n4. Provide only the computed mean value as the output, without any additional textual answer.\n\nPlease provide the computed mean of the Y values in the bar plot, without any additional textual response.\n\n<input SVG bar plot>:",
            "Correlate":"<input>: An SVG line chart with n data points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the line chart with a fitted line added using linear regression. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original line and the fitted line. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the X and Y values of each data point from their respective labels.\n3. Perform linear regression on the extracted X and Y values to obtain the coefficients of the fitted line.\n4. Reconstruct the SVG code of the line chart, including the original line and the fitted line.\n5. Omit the axes, title, legends, labels, and other unnecessary elements in the reconstructed SVG code.\n6. Remember to add the necessary shape definitions for the lines in the reconstructed SVG code, if applicable.\n7. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the line chart with the fitted line added, without any additional textual response.\n\n<input SVG line chart>:",
            "Determine Range":"<input>: An SVG line chart with n data points. Each data point is labeled with its corresponding coordinates (X and Y values). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The range of the Y values in the dataset, in the format of 'min, max'. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG line chart and identify the data points and their corresponding labeled coordinates (X and Y values).\n2. Extract the Y value of each data point from their respective labels.\n3. Determine the minimum and maximum values among the extracted Y values.\n4. Respond with the range of the Y values in the format of 'min, max'.\n5. Do not include any other textual answer in your response besides the determined range.\n\nPlease provide the range of the Y values in the line chart, in the format of 'min, max', without any additional textual response.\n\n<input SVG line chart>:"
        }
    },
    "Bar Plot": {
        "unlabeled": {
            "Data Extraction": "<input>: An SVG bar plot with n bins. The bins are not labeled with their values. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A comma-separated values (CSV) string with one column: 'Y'. Each row represents the height of a bin. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the axes and their scales.\n2. For each bin in the bar plot, relate its position to the Y axis.\n3. Use the length of the axes and their labeling to compute the precise height of each bin.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the precise height of each bin based on the computed values.\n6. Format the extracted height as a CSV string with two columns: 'X' and 'Y'.\n8. Each row in the CSV should represent the height of a single bin.\n9. Do not include any other textual answer in your response besides the CSV string.\n\nPlease provide the CSV string with the height of each bin in the specified format without any additional textual response.\n\n<input SVG bar plot>:",
            "Filtering": "<input>: An SVG bar plot with n bins. The bins are not labeled with their values. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the bar plot with the bins that meet the specified criteria (X >= 3 and X <= 7). Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the bins that meet the given criteria. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the axes and their scales.\n2. For each bin in the bar plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each bin.\n4. Apply the specified filtering criteria: (X >= 3 and X <= 7). This criteria is based on the computed X coordinates.\n5. Reconstruct the SVG code of the bar plot, including only the bins that meet the given criteria.\n6. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n7. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n8. Remember to add the necessary shape definitions for the bins in the reconstructed SVG code, if applicable.\n9. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the bins filtered according to the specified criteria, without any additional textual response.\n\n<input SVG bar plot>:",
            "Find Anomalies": "<input>: An SVG bar plot with n bins. The bins are not labeled with their values. The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: The complete SVG code of the bar plot with the outlier bins (significant spikes or drops) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original bins with the outlier bins highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the axes and their scales.\n2. For each bin in the bar plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each bin.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value (height) of each bin based on the computed coordinates.\n6. Identify the outlier bins in the bar plot, defined as bins that represent significant spikes or drops based on their computed values.\n7. Reconstruct the SVG code of the bar plot, coloring the outlier bins with a different color compared to the rest of the bins.\n8. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n9. Ensure that the reconstructed SVG contains the original bins with the outlier bins highlighted.\n10. Include the necessary shape definitions in the reconstructed SVG code.\n11. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the outlier bins colored differently, without any additional textual response.\n\n<input SVG bar plot>:",
            "Find Extremum": "<input>: An SVG bar plot with n bins. The bins are not labeled with their values. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the bar plot with the extremum bins (highest and lowest Y values) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original bins with the extremum bins highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the axes and their scales.\n2. For each bin in the bar plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each bin.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value (height) of each bin based on the computed coordinates.\n6. Identify the extremum bins in the bar plot, defined as the bins with the highest and lowest Y values based on their computed values.\n7. Reconstruct the SVG code of the bar plot, coloring the extremum bins with a different color compared to the rest of the bins.\n8. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n9. Ensure that the reconstructed SVG contains the original bins with the extremum bins highlighted.\n10. Include the necessary shape definitions in the reconstructed SVG code.\n11. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the extremum bins colored differently, without any additional textual response.\n\n<input SVG bar plot>:",
            "Compute Value": "<input>: An SVG bar plot with n bins. The bins are not labeled with their values. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A single numerical value representing the computed aggregate (mean of the Y values). Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the axes and their scales.\n2. For each bin in the bar plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each bin.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value (height) of each bin based on the computed coordinates.\n6. Calculate the mean of all the extracted Y values.\n7. Provide only the computed mean value as the output, without any additional textual answer.\n\nPlease provide the computed mean of the Y values in the bar plot, without any additional textual response.\n\n<input SVG bar plot>:",
            "Determine Range": "<input>: An SVG bar plot with n bins. The bins are not labeled with their values. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The range of the Y values (heights of the bins) in the dataset, in the format of 'min, max'. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the axes and their scales.\n2. For each bin in the bar plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each bin.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value (height) of each bin based on the computed coordinates.\n6. Determine the minimum and maximum values among the extracted Y values.\n7. Respond with the range of the Y values in the format of 'min, max'.\n8. Do not include any other textual answer in your response besides the determined range.\n\nPlease provide the range of the Y values in the bar plot, in the format of 'min, max', without any additional textual response.\n\n<input SVG bar plot>:",
            "Sort": "<input>: An SVG bar plot with n bins. The bins are not labeled with their values. The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the bar plot with the bins sorted in descending order based on their Y values (heights). Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original bins with their colors preserved, but in the new sorted order. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the axes and their scales.\n2. For each bin in the bar plot, relate its position to the X and Y axes.\n3. Use the length of the axes and their labeling to compute the precise coordinate of each bin.\n4. Keep in mind that in SVG, the origin is at the top left corner, X increases from left to right, and Y increases from top to bottom. This is opposite to the traditional Cartesian coordinate system.\n5. Extract the Y value (height) of each bin based on the computed coordinates.\n6. Sort the bins in descending order based on their Y values (heights).\n7. Reconstruct the SVG code of the bar plot, arranging the bins in the new sorted order.\n8. Preserve the original colors of the bins in the reconstructed SVG.\n9. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n10. Ensure that the reconstructed SVG contains the same number of bins as the original plot.\n11. Include the necessary shape definitions in the reconstructed SVG code.\n12. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the bins sorted in descending order, without any additional textual response.\n\n<input SVG bar plot>:"
        },
        "labeled": {
            "Data Extraction": "<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A comma-separated values (CSV) string with one column: ''Y'. Each row represents the height of a bin. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n4. Format the extracted coordinates as a CSV string with one column:  'Y'.\n5. Each row in the CSV should represent the coordinates of a single bin.\n6. Do not include any other textual answer in your response besides the CSV string.\n\nPlease provide the CSV string with the coordinates of each bin in the specified format without any additional textual response.\n\n<input SVG bar plot>:",
            "Filtering": "<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the bar plot with the bins that meet the specified criteria (X >= 3 and X <= 7). Omit the axes, title, legends, and other unnecessary elements in the chart. The output should only include the bins that meet the given criteria. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n3. Determine the X coordinate of each bin based on its position in the plot.\n4. Apply the specified filtering criteria: (X >= 3 and X <= 7). This criteria is based on the determined X coordinates.\n5. Reconstruct the SVG code of the bar plot, including only the bins that meet the given criteria.\n6. Omit the axes, title, legends, and other unnecessary elements in the reconstructed SVG code.\n7. Remember to add the necessary shape definitions for the bins in the reconstructed SVG code, if applicable.\n8. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the bins filtered according to the specified criteria, without any additional textual response.\n\n<input SVG bar plot>:",
            "Find Anomalies": "<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The axes, title, legends, and other unnecessary elements are omitted for simplicity.\n\n<output>: The complete SVG code of the bar plot with the outlier bins (significant spikes or drops) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original bins with the outlier bins highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n3. Identify the outlier bins in the bar plot, defined as bins that represent significant spikes or drops based on their labeled values.\n4. Reconstruct the SVG code of the bar plot, coloring the outlier bins with a different color compared to the rest of the bins.\n5. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n6. Ensure that the reconstructed SVG contains the original bins with the outlier bins highlighted.\n7. Include the necessary shape definitions in the reconstructed SVG code.\n8. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the outlier bins colored differently, without any additional textual response.\n\n<input SVG bar plot>:",
            "Find Extremum": "<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the bar plot with the extremum bins (highest and lowest Y values) colored differently. Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original bins with the extremum bins highlighted. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n3. Identify the extremum bins in the bar plot, defined as the bins with the highest and lowest Y values based on their labeled values.\n4. Reconstruct the SVG code of the bar plot, coloring the extremum bins with a different color compared to the rest of the bins.\n5. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n6. Ensure that the reconstructed SVG contains the original bins with the extremum bins highlighted.\n7. Include the necessary shape definitions in the reconstructed SVG code.\n8. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the extremum bins colored differently, without any additional textual response.\n\n<input SVG bar plot>:",
            "Compute Value": "<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: A single numerical value representing the computed aggregate (mean of the Y values). Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n3. Calculate the mean of all the extracted Y values.\n4. Provide only the computed mean value as the output, without any additional textual answer.\n\nPlease provide the computed mean of the Y values in the bar plot, without any additional textual response.\n\n<input SVG bar plot>:",
            "Determine Range": "<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The range of the Y values (heights of the bins) in the dataset, in the format of 'min, max'. Do not include any other textual answer in your response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n3. Determine the minimum and maximum values among the extracted Y values.\n4. Respond with the range of the Y values in the format of 'min, max'.\n5. Do not include any other textual answer in your response besides the determined range.\n\nPlease provide the range of the Y values in the bar plot, in the format of 'min, max', without any additional textual response.\n\n<input SVG bar plot>:",
            "Sort": "<input>: An SVG bar plot with n bins. Each bin is labeled with its corresponding Y value (height of the bar). The coordinates of the points are defined differently in SVG files, with the origin at the top left corner. X increases from left to right, and Y increases from top to bottom (opposite to the traditional Cartesian coordinate system).\n\n<output>: The complete SVG code of the bar plot with the bins sorted in descending order based on their Y values (heights). Omit the axes, title, legends, and other unnecessary elements in the chart. The output should include the original bins with their colors preserved, but in the new sorted order. Remember to add the necessary shape definitions if applicable. Do not include any other textual answer in the response.\n\nInstructions:\n1. Examine the input SVG bar plot and identify the bins and their corresponding labeled Y values.\n2. Extract the Y value (height) of each bin from their respective labels.\n3. Sort the bins in descending order based on their Y values (heights).\n4. Reconstruct the SVG code of the bar plot, arranging the bins in the new sorted order.\n5. Preserve the original colors of the bins in the reconstructed SVG.\n6. Omit the axes, title, legends, and any other unnecessary elements in the reconstructed SVG.\n7. Ensure that the reconstructed SVG contains the same number of bins as the original plot.\n8. Include the necessary shape definitions in the reconstructed SVG code.\n9. Provide the complete reconstructed SVG code as the output, without any additional textual answer.\n\nPlease provide the complete SVG code of the bar plot with the bins sorted in descending order, without any additional textual response.\n\n<input SVG bar plot>:"
        }
    }
}